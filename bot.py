import os
import asyncio
from fastapi import FastAPI, Request
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
)
import yt_dlp

TOKEN = os.getenv('BOT_TOKEN')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')

print(f"–ó–∞–ø—É—Å–∫–∞–µ–º —Å TOKEN={TOKEN} WEBHOOK_URL={WEBHOOK_URL}")

app = FastAPI()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø *Link Saver* ‚Äî –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ TikTok, Instagram, YouTube –∏–ª–∏ Pinterest, –∏ —è –ø–æ–º–æ–≥—É —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ.\n\n"
        "‚ú® –ê –µ—â—ë –ø–æ–ø—Ä–æ–±—É–π –º–æ–µ–≥–æ –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞ ‚Äî [Emotional DJ](https://t.me/emotionaldj_bot), –æ–Ω –ø–æ–¥–±–∏—Ä–∞–µ—Ç –º—É–∑—ã–∫—É –ø–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! üéµ",
        parse_mode='Markdown'
    )

def detect_service(url: str) -> str:
    url = url.lower()
    if "tiktok.com" in url:
        return "TikTok"
    elif "instagram.com" in url:
        return "Instagram"
    elif "youtube.com" in url or "youtu.be" in url:
        return "YouTube"
    elif "pinterest.com" in url:
        return "Pinterest"
    else:
        return "unknown"

async def download_video(url: str, output_path: str, service: str):
    loop = asyncio.get_event_loop()
    def run_yt_dlp():
        ydl_opts = {
            'outtmpl': output_path,
            'format': 'mp4',
        }
        # –î–ª—è Instagram –∏ Pinterest ‚Äî –∫—É–∫–∏
        if service == "Instagram":
            ydl_opts['cookiefile'] = 'instagram_cookies.txt'
        elif service == "Pinterest":
            ydl_opts['cookiefile'] = 'pinterest_cookies.txt'
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])
    return loop.run_in_executor(None, run_yt_dlp)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    service = detect_service(text)
    if service == "unknown":
        await update.message.reply_text("‚ùó –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Å–µ—Ä–≤–∏—Å.")
        return

    await update.message.reply_text(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–µ—Ä–≤–∏—Å: {service}. –°–µ–π—á–∞—Å –ø–æ–ø—Ä–æ–±—É—é —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ...")

    os.makedirs("downloads", exist_ok=True)
    filename = f"downloads/{update.effective_user.id}_{int(update.message.date.timestamp())}.mp4"

    try:
        await download_video(text, filename, service)
        with open(filename, 'rb') as video_file:
            await update.message.reply_video(
                video=video_file,
                caption=(
                    "‚úÖ –°–∫–∞—á–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é [Link Saver](https://t.me/LinkSaverVideo_Bot)\n"
                    "‚ú® –¢–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–π –º–æ–µ–≥–æ –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞ ‚Äî [Emotional DJ](https://t.me/emotionaldj_bot) üéµ"
                ),
                parse_mode='Markdown'
            )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ üò¢ –í–æ–∑–º–æ–∂–Ω–æ, —Å—Å—ã–ª–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–ª–∏ –≤–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n"
            "–ï—Å–ª–∏ —ç—Ç–æ Instagram –∏–ª–∏ Pinterest ‚Äî –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –≤ –ø—Ä–æ–µ–∫—Ç–µ –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–∞–π–ª cookies!"
        )
    finally:
        if os.path.exists(filename):
            os.remove(filename)

telegram_app = ApplicationBuilder().token(TOKEN).build()
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

@app.on_event("startup")
async def on_startup():
    if not TOKEN:
        print("‚ùå –û–®–ò–ë–ö–ê: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        return
    if not WEBHOOK_URL:
        print("‚ùå –û–®–ò–ë–ö–ê: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        return
    webhook_full_url = WEBHOOK_URL
    print(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –Ω–∞: {webhook_full_url}")
    await telegram_app.initialize()
    await telegram_app.bot.set_webhook(url=webhook_full_url)
    await telegram_app.start()
    print(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_full_url}")

@app.on_event("shutdown")
async def on_shutdown():
    await telegram_app.stop()
    await telegram_app.shutdown()

@app.post("/webhook")
async def webhook(req: Request):
    data = await req.json()
    update = Update.de_json(data, telegram_app.bot)
    await telegram_app.process_update(update)
    return {"ok": True}

